package  ${virginPackage}.service;


import java.math.*;
import java.util.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import ${virginPackage}.exception.*;
import ${virginPackage}.repository.*;
import ${virginPackage}.utility.Utilities;

import ${package}.*;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;

/**
* @author Zathura Code Generator http://zathuracode.org/
* www.zathuracode.org
* 
*/

@Scope("singleton")
@Service
public class ${metaData.getRealClassName()}ServiceImpl implements ${metaData.getRealClassName()}Service{

	private static final Logger log = LoggerFactory.getLogger(${metaData.getRealClassName()}ServiceImpl.class);

	@Autowired
	private ${metaData.getRealClassName()}Repository ${metaData.getRealClassNameAsVariable()}Repository;
	
	@Autowired
	private Validator validator;
                
    @Override        		
	public void validate(${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()})throws Exception{		
		 try {
			Set<ConstraintViolation<${metaData.getRealClassName()}>> constraintViolations =validator.validate(${metaData.getRealClassNameAsVariable()});
			 if(constraintViolations.size()>0){
				 StringBuilder strMessage=new StringBuilder();
				 for (ConstraintViolation<${metaData.getRealClassName()}> constraintViolation : constraintViolations) {
					strMessage.append(constraintViolation.getPropertyPath().toString());
					strMessage.append(" - ");
					strMessage.append(constraintViolation.getMessage());
					strMessage.append(". \n");
				}
				 throw new Exception(strMessage.toString());
			 }
		 }catch (Exception e) {
			throw e;
		}
	}
	
	@Override
	@Transactional(readOnly=true)
	public Long count(){
	 	return ${metaData.getRealClassNameAsVariable()}Repository.count();
	}

	@Override
	@Transactional(readOnly=true)
	public List<${metaData.getRealClassName()}> findAll(){
		log.debug("finding all ${metaData.getRealClassName()} instances");
       	return ${metaData.getRealClassNameAsVariable()}Repository.findAll();
    }
			
			
	@Override
	@Transactional(readOnly=false, propagation=Propagation.REQUIRED)			
    public ${metaData.getRealClassName()} save(${metaData.getRealClassName()} entity) throws Exception {
		log.debug("saving ${metaData.getRealClassName()} instance");
	    try {
	    
	    if(entity==null){
			throw new ZMessManager().new NullEntityExcepcion("${metaData.getRealClassName()}");
		}
		
		validate(entity);	
	
		if(${metaData.getRealClassNameAsVariable()}Repository.findById(entity.get${metaData.primaryKey.getGetNameOfPrimaryName()}()).isPresent()){
           throw new ZMessManager(ZMessManager.ENTITY_WITHSAMEKEY);
        }    
	
	    return ${metaData.getRealClassNameAsVariable()}Repository.save(entity);
	    
	    } catch (Exception e) {
	    	log.error("save ${metaData.getRealClassName()} failed", e);
	    	throw e;
	    }
    }
			
			
			@Override
			@Transactional(readOnly=false , propagation=Propagation.REQUIRED)
            public void delete(${metaData.getRealClassName()} entity) throws Exception {
            	log.debug("deleting ${metaData.getRealClassName()} instance");
            	
	            if(entity==null){
	    			throw new ZMessManager().new NullEntityExcepcion("${metaData.getRealClassName()}");
	    		}
    	
            #if(${metaData.getPrimaryKey().isPrimiaryKeyAComposeKey()})
                #foreach($idStringAsVariable  in $finalParamForIdClassAsVariables)
                    $idStringAsVariable
                #end
            #else
                    if(entity.get${metaData.primaryKey.getGetNameOfPrimaryName()}()==null){
                    throw new ZMessManager().new EmptyFieldException("${metaData.primaryKey.getShowName()}");
                    }
            #end
            
            #if(${metaData.isGetOneToManyProperties()})
	            findById(entity.get${metaData.primaryKey.getGetNameOfPrimaryName()}()).ifPresent(entidad->{	            	
	                #foreach($member  in ${metaData.getOneToManyProperties()})
						#if(${member.getRealClassName().toString().endsWith("s")})
							List<${member.getRealClassName()}> ${member.name} = entidad.get${member.getRealClassName()}es();
	                    #else
							List<${member.getRealClassName()}> ${member.name} = entidad.get${member.getRealClassName()}s();
						#end
	                    if(Utilities.validationsList(${member.name})==true){
                       	 	throw new ZMessManager().new DeletingException("${member.name}");
                        }
	                #end
	            });
            #end
           

            try {
            
            ${metaData.getRealClassNameAsVariable()}Repository.deleteById(entity.get${metaData.primaryKey.getGetNameOfPrimaryName()}());
            log.debug("delete ${metaData.getRealClassName()} successful");
            
            } catch (Exception e) {
            	log.error("delete ${metaData.getRealClassName()} failed", e);
            	throw e;
            }
            	
            }
            
            @Override
			@Transactional(readOnly=false , propagation=Propagation.REQUIRED)
            public void deleteById(${metaData.primaryKey.getRealClassName()} id) throws Exception {            
            	log.debug("deleting ${metaData.getRealClassName()} instance");
            	if(id==null){
            		throw new ZMessManager().new EmptyFieldException("${metaData.primaryKey.getShowName()}");
            	}
            	if(${metaData.getRealClassNameAsVariable()}Repository.findById(id).isPresent()){
           			delete(${metaData.getRealClassNameAsVariable()}Repository.findById(id).get());
       			}    
            }	
			
			@Override
			@Transactional(readOnly=false , propagation=Propagation.REQUIRED)
            public ${metaData.getRealClassName()} update(${metaData.getRealClassName()} entity) throws Exception {

				log.debug("updating ${metaData.getRealClassName()} instance");
				
	            try {
	            
	            	if(entity==null){
		    			throw new ZMessManager().new NullEntityExcepcion("${metaData.getRealClassName()}");
		    		}
		    		
	            validate(entity);
	
	            return ${metaData.getRealClassNameAsVariable()}Repository.save(entity);
	            
	            } catch (Exception e) {
	            	log.error("update ${metaData.getRealClassName()} failed", e);
	            	throw e;		
	            }
            }
			
			@Override
			@Transactional(readOnly=true)
            public Optional<${metaData.getRealClassName()}> findById(${metaData.primaryKey.getRealClassName()} ${metaData.primaryKey.getShowName()}) throws Exception {            
            	log.debug("getting ${metaData.getRealClassName()} instance");
            	return ${metaData.getRealClassNameAsVariable()}Repository.findById(${metaData.primaryKey.getShowName()});
            }
			
}
