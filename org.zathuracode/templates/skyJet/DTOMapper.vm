package ${virginPackage}.mapper;

import java.util.List;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

import $package.${metaData.getRealClassName()};
import ${virginPackage}.dto.${metaData.getRealClassName()}DTO;



/**
* @author Zathura Code Generator Version 9.0 http://zathuracode.org/
* www.zathuracode.org
* 
* Mapper Build with MapStruct https://mapstruct.org/
* MapStruct is a code generator that greatly simplifies the
* implementation of mappings between Java bean type
* based on a convention over configuration approach.
*/

@Mapper
public interface ${metaData.getRealClassName()}Mapper {

	${getMappingsEntityToDTo}
	public ${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}To${metaData.getRealClassName()}DTO(${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()});
	
	${getMappingsDTOToEntity}
	public ${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()}DTOTo${metaData.getRealClassName()}(${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}DTO);
	
	public List<${metaData.getRealClassName()}DTO> list${metaData.getRealClassName()}ToList${metaData.getRealClassName()}DTO(List<${metaData.getRealClassName()}> ${metaData.getRealClassNameAsVariable()}s);

	public List<${metaData.getRealClassName()}> list${metaData.getRealClassName()}DTOToList${metaData.getRealClassName()}(List<${metaData.getRealClassName()}DTO> ${metaData.getRealClassNameAsVariable()}DTOs);
}
